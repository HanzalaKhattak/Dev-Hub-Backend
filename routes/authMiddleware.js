import jwt from "jsonwebtoken";

/**
 * @swagger
 * /authmiddleware:
 *   get:
 *     summary: Protected route example
 *     description: Example of a protected route that requires JWT authentication. Returns user details from the token.
 *     tags:
 *       - Authentication
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: header
 *         name: token
 *         required: true
 *         description: JWT token for authentication
 *         schema:
 *           type: string
 *           example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
 *     responses:
 *       200:
 *         description: Access authorized, returns user information
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Access authorized
 *                 user:
 *                   type: object
 *                   properties:
 *                     userId:
 *                       type: string
 *                       example: 64c8e9a4f6a4d5c8b3f0e123
 *                     email:
 *                       type: string
 *                       example: johndoe@example.com
 *                     userName:
 *                       type: string
 *                       example: johndoe
 *       404:
 *         description: Invalid or missing token
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 wrn:
 *                   type: string
 *                   example: Invalid Token
 *       401:
 *         description: User not authorized
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 wrn:
 *                   type: string
 *                   example: User not authorized
 *       500:
 *         description: Internal server error
 */

export const authmiddleware =  async(req,res,next)=>{
    try {
        const varifiedToken = req.headers.token;
        console.log(varifiedToken);        
        if(!varifiedToken) return res.status(404).json({wrn: "Invalid Token"});

        //This middleware verify the user, wheter it is sign in or not, It verify the user using token generated by user sign in.
        const isVarifiedUser = await jwt.verify(varifiedToken,"abcdefg692354%#$^8*");
        if(!isVarifiedUser) return res.status(404).json({wrn:"User not authorized"});
            req.user = isVarifiedUser;

            // if(req.user.isadmin === "admin") next(); // User for Different role to sign in like As a admin, or as a user

            next();
    } catch (error) {
        console.log("error",error)
    }
}
